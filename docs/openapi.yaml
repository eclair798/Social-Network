openapi: 3.0.0
info:
  title: Social Network API
  version: 1.0.0

servers:
  - url: http://localhost:8000

paths:
  /user/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input

  /user/login:
    post:
      summary: Login and retrieve JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful, returns JWT token
        '401':
          description: Invalid credentials

  /user/update_profile:
    put:
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                date_of_birth:
                  type: string
                  format: date
                phone:
                  type: string
                bio:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
        '404':
          description: User not found

  /user/read_profile:
    get:
      summary: Read user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Return user's profile information
        '404':
          description: User not found

  /stat/post/{post_id}:
    get:
      summary: Get total statistics for a post (views, likes, comments)
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Statistics for the post
          content:
            application/json:
              schema:
                type: object
                properties:
                  views:
                    type: integer
                  likes:
                    type: integer
                  comments:
                    type: integer
        '404':
          description: Post not found

  /stat/post/{post_id}/views_by_day:
    get:
      summary: Get daily views for a post
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Daily views
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date
                    count:
                      type: integer

  /stat/post/{post_id}/likes_by_day:
    get:
      summary: Get daily likes for a post
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Daily likes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date
                    count:
                      type: integer

  /stat/post/{post_id}/comments_by_day:
    get:
      summary: Get daily comments for a post
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Daily comments
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date
                    count:
                      type: integer

  /stat/top_posts:
    get:
      summary: Get top 10 posts by selected metric
      parameters:
        - in: query
          name: metric
          required: false
          schema:
            type: string
            enum: [like, comment, view]
            default: like
      responses:
        '200':
          description: Top 10 posts by likes/comments/views
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    post_id:
                      type: string
                    count:
                      type: integer

  /stat/top_users:
    get:
      summary: Get top 10 users by selected metric
      parameters:
        - in: query
          name: metric
          required: false
          schema:
            type: string
            enum: [like, comment, view]
            default: like
      responses:
        '200':
          description: Top 10 users by likes/comments/views
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: string
                    count:
                      type: integer

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
