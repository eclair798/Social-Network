services:

  # ──────────────────────────────────────────────────
  # 1) Api-Gateway-сервис (Flask/HTTP)
  # ──────────────────────────────────────────────────
  api-gateway:
    build:  
      context: .  
      dockerfile: services/api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8000:8000"
    depends_on:
      - user
      - post
    environment:
      USER_SERVICE_URL: "http://user:5000/user"
      POST_SERVICE_HOST: "post"
      POST_SERVICE_PORT: "6000"
      JWT_SECRET_KEY: "secret_key"

  # ──────────────────────────────────────────────────
  # 2) User-сервис (Flask/HTTP)
  # ──────────────────────────────────────────────────
  user:
    build: ./services/user
    container_name: user
    ports:
      - "5000:5000"
    depends_on:
      - user_db
    environment:
      USER_DATABASE_URI: "postgresql://postgres:password@user_db:5432/user_db"
      JWT_SECRET_KEY: "secret_key"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"

  user-tests:
    build:
      context: ./services/user
      dockerfile: Dockerfile.test
    environment:
      DATABASE_URI: "sqlite:///:memory:"
      JWT_SECRET_KEY: test_secret_key

  user_db:
    image: postgres:15-alpine
    container_name: user_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user_db
    ports:
      - "5433:5432" 
    volumes:
      - user_db_data:/var/lib/postgresql/data
    # Если не надо наружу, можно убрать ports

  # ──────────────────────────────────────────────────
  # 3) Post-сервис (gRPC)
  # ──────────────────────────────────────────────────
  post:
    build:  
      context: .  
      dockerfile: services/post/Dockerfile 
    container_name: post
    ports:
      - "6000:6000"
    depends_on:
      - post_db
    environment:
      POST_DATABASE_URI: "postgresql://postgres:password@post_db:5432/post_db"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"

  post_db:
    image: postgres:15-alpine
    container_name: post_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: post_db
    ports:
      - "5434:5432"
    volumes:
      - post_db_data:/var/lib/postgresql/data


  # ──────────────────────────────────────────────────
  # 4) Stat-сервис (gRPC)
  # ──────────────────────────────────────────────────

  stat:
    build:  
      context: .  
      dockerfile: services/stat/Dockerfile
    container_name: stat
    ports:
      - "7000:7000"
    depends_on:
      - clickhouse
      - kafka
    environment:
      CLICKHOUSE_HOST: "clickhouse"
      CLICKHOUSE_PORT: "9000"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"

  clickhouse:
    image: yandex/clickhouse-server:latest
    container_name: clickhouse
    ports:
      - "8123:8123" # HTTP
      - "9000:9000" # Native client
    volumes:
      - clickhouse_data:/var/lib/clickhouse


  # ──────────────────────────────────────────────────
  # 5) Kafka
  # ──────────────────────────────────────────────────

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"

  # ──────────────────────────────────────────────────

volumes:
  user_db_data:
  post_db_data:
  clickhouse_data:
